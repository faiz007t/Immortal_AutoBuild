#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: immortalwrt

on:
  workflow_dispatch:
  repository_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: aw1000_2.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: "false"
  UPLOAD_FIRMWARE: "true"
  UPLOAD_RELEASE: "true"
  TZ: Asia/Kuala_Lumpur

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize build environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl \
            device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool \
            libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp \
            ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools \
            qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown "$USER":"$(id -gn)" /workdir

      - name: Clone ImmortalWrt source
        working-directory: /workdir
        run: |
          df -hT "$PWD"
          git clone --depth=1 --branch "$REPO_BRANCH" "$REPO_URL" openwrt
          ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"

      - name: Cache build output
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt

      - name: Load custom feeds and apply pre-feed script
        run: |
          if [ -e "$FEEDS_CONF" ]; then mv "$FEEDS_CONF" openwrt/feeds.conf.default; fi
          chmod +x "$DIY_P1_SH"
          cd openwrt
          "$GITHUB_WORKSPACE/$DIY_P1_SH"

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration and apply post-feed script
        run: |
          if [ -e files ]; then mv files openwrt/files; fi
          if [ -e "$CONFIG_FILE" ]; then mv "$CONFIG_FILE" openwrt/.config; fi
          chmod +x "$DIY_P2_SH"
          cd openwrt
          "$GITHUB_WORKSPACE/$DIY_P2_SH"

      - name: Download package sources
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j"$(nproc)" || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          if [ -s DEVICE_NAME ]; then
            echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          fi
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Check disk usage
        if: always()
        run: df -hT

      - name: Debug firmware paths
        run: |
          echo "Listing openwrt/bin:"
          ls -la openwrt/bin
          echo "Listing openwrt/bin/targets:"
          ls -la openwrt/bin/targets || true
          echo "Listing openwrt/bin/targets/*:"
          ls -la openwrt/bin/targets/* || true

      - name: Organize firmware files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true'
        run: |
          # Find the first subdir in openwrt/bin/targets/*/*
          FIRMWARE_DIR=$(find openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d | head -n 1)
          if [ -z "$FIRMWARE_DIR" ]; then
            echo "Firmware directory not found!"
            exit 1
          fi
          cd "$FIRMWARE_DIR"
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload bin directory (optional)
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=immortalwrt-$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to GitHub Release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
